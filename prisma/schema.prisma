// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String    @unique
  username String    @unique
  password String
  role     Role      @default(USER)
  Booking  Booking[]
  Review   Review[]
}

model Room {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type        String
  capacity    Int
  price       Int
  image       String
  location    String
  isAvailable Boolean   @default(true)
  amenities   String[]
  Booking     Booking[]
  Review      Review[]
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Booking {
  id         String        @id @default(uuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  checkIn    DateTime
  checkOut   DateTime
  totalPrice Int
  status     BookingStatus @default(PENDING)
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  roomId     String
  room       Room          @relation(fields: [roomId], references: [id])
  Payment    Payment[]
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating  Int
  comment String
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  roomId  String
  room    Room   @relation(fields: [roomId], references: [id])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Payment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount        Int
  paymentMethod String
  status        PaymentStatus @default(PENDING)
  bookingId     String
  booking       Booking       @relation(fields: [bookingId], references: [id])
}
